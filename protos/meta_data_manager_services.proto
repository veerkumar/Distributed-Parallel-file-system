syntax = "proto3";


package MetaDataManager;

// The greeting service definition.
service MetaDataManagerService {
  // Sends a greeting
  rpc fileAccessRequestHandler (FileAccessRequest) returns (FileAccessResponse) {}
  rpc registerServiceHandler(RegisterServiceRequest) returns (RegisterServiceResponse) {}
  rpc updateLastModifiedServiceHandler(UpdateLastModifiedServiceRequest) returns (UpdateLastModifiedServiceResponse) {}
}

/* The request message containing information for file access
 we added re_ipaddr for server to send responce back on another channel.
 One client can send mutiple request hence using request id
*/
/*
  enum 
*/
message FileAccessRequest {
  enum RequestType {
	READ = 0;
	WRITE = 1;
	CREATE = 2;
	DELETE = 3;
	OPEN = 4;
	FSTAT = 5;
  }

  RequestType type = 1;
  uint32 StartByte = 2;
  uint32 EndByte = 3;
  uint64 RequestId = 4;  
  string FileName = 5;
  string ReqIpaddrPort = 6;
  uint32 stripwidth = 8;
  uint64 fdis = 9;  
}

/* The response message containing request status and token if success 
*/
message  FileAccessResponse {
  uint64 RequestId = 1;
  enum ReturnCode {
              OK = 0; 
              ERROR = 1;
  }
  ReturnCode code = 2;
  string Token = 3;
  uint32 StartByte = 4;
  uint32 EndByte = 5;
  uint64 createTime = 6;
  uint64 lastUpdateTime = 7;
  uint32 fileSize = 8;
  uint64 fdis = 9;      /* file discripter*/
  repeated string serverList = 10;
}

/*As soon as client or server start, it need to register service with the meta data manager*/
message RegisterServiceRequest {
	enum ServiceType {
		CLIENT = 0;
		FILESERVER = 1;
	}
	ServiceType Type = 1;
	string IpPort = 2;
}

message RegisterServiceResponse {
    enum ReturnCode {
		OK = 0;
		ERROR = 1;
    }
    ReturnCode code = 1;
}

/* Update file last modified time service */

message UpdateLastModifiedServiceRequest {
        string fileName = 1;
	uint64  time = 2;
	uint32  NewByteWwrote = 3;
}

message UpdateLastModifiedServiceResponse{
	enum ReturnCode {
		OK = 0;
		ERROR = 1;
	}
	ReturnCode code = 1;
}

